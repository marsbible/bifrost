package org.bifrost.worker.service

import akka.event.LoggingAdapter
import akka.grpc.GrpcServiceException
import akka.stream.Materializer
import ml.combust.mleap.runtime.frame.{DefaultLeapFrame, Row, Transformer}
import ml.combust.mleap.tensor.SparseTensor
import org.bifrost.worker.grpc._
import org.bifrost.worker.Main
import org.bifrost.worker.common._
import scalapb.json4s.JsonFormat

import scala.concurrent.Future

/**
  模板
*/
class PredictServiceImpl(main: Main, modelPath: String) extends PredictService with Predict{
  private implicit val mat: Materializer = main.mat
  private val logger: LoggingAdapter = main.logger
  val (mleapPipeline, outputFields, rowTransformer, rowsTransformer) = init(modelPath)
  val batchEnabled: Boolean = main.cnf.getBoolean("predict.batch")


  def fromRequest(request: PredictRequest): DefaultLeapFrame = {
    val row = Row(
            {{#input}}
              {{{requestValue}}}{{comma}}
            {{/input}}
            )
            {{#inputs}}
            .withValues(Seq(
            {{#input}}
              {{{requestValue}}}{{comma}}
            {{/input}}
             ))
            {{/inputs}}

    DefaultLeapFrame(inputSchema(), Seq(row))
  }

  def fromRequests(requests: PredictRequests): DefaultLeapFrame = {
    val rows = requests.request.map(request => {
      Row(
        {{#input}}
          {{{requestValue}}}{{comma}}
        {{/input}}
        )
        {{#inputs}}
        .withValues(Seq(
        {{#input}}
          {{{requestValue}}}{{comma}}
        {{/input}}
        ))
        {{/inputs}}
    })

    DefaultLeapFrame(inputSchema(), rows)
  }

  def toReply(df: DefaultLeapFrame): PredictReply = {
    val row = df.dataset.head

    PredictReply(
      {{#output}}
        {{{rowValue}}}{{comma}}
      {{/output}}
      {{#output_indices}}
        {{{rowValue}}}{{comma}}
      {{/output_indices}}
    )
  }

  def toReplies(df: DefaultLeapFrame): PredictReplies = {
    val replies = df.dataset.map(row => {
      PredictReply(
         {{#output}}
            {{{rowValue}}}{{comma}}
         {{/output}}
         {{#output_indices}}
            {{{rowValue}}}{{comma}}
         {{/output_indices}}
      )
    })

    PredictReplies(replies)
  }

  override def predict(in: PredictRequest): Future[PredictReply] = {
    val start = System.currentTimeMillis()
    try {
      val df = transform(fromRequest(in))
      val reply = toReply(df)

      val end = System.currentTimeMillis()
      logger.info("predict time cost {} ms", end - start)

      Future.successful(reply)
    } catch {
      case t: Throwable => {
        logger.warning("predict error: {}, request: {}", t.getMessage, JsonFormat.toJsonString(in))
        Future.failed(new GrpcServiceException(io.grpc.Status.INVALID_ARGUMENT.withDescription(t.getMessage)))
      }
    }
  }

  override def predictMulti(in: PredictRequests): Future[PredictReplies] = {
    val start = System.currentTimeMillis()
    try {
      val df = transforms(fromRequests(in))
      val replies = toReplies(df)

      val end = System.currentTimeMillis()
      logger.info("predictMulti time cost {} ms", end - start)

      Future.successful(replies)
    }catch {
      case t: Throwable => {
        logger.warning("predictMulti error: {}, request: {}", t.getMessage, JsonFormat.toJsonString(in))
        Future.failed(new GrpcServiceException(io.grpc.Status.INVALID_ARGUMENT.withDescription(t.getMessage)))
      }
    }
  }
}